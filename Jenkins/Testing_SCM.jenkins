#!groovy
//Run NGINX docker build
properties([disableConcurrentBuilds()])

pipeline {
	agent {
		label 'docker-agent'
		}
	options {
		buildDiscarder (logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
		timestamps()
	}
	stages {
		stage("Build") {
			steps {
				echo "========= Start Build new NGINX =========="
				//Ignore ERROR with first build
				catchError {
					sh 'docker tag mynginx_first mynginx_first_stable_image'
					sh 'docker rmi mynginx_first'
					sh 'docker stop mynginx_first'
					sh 'docker rename mynginx_first mynginx_first_stable'
					}
        			echo currentBuild.result
					dir ('NGINX') {
					sh 'docker build -t mynginx_first .'
				        }
					//Добавить статичную веб страницу!!!!
					sh 'docker run --name mynginx_first -d -v /var/www:/usr/local/nginx/html -p 80:80 -t mynginx_first'
					//sh 'docker exec mynginx_first service nginx start'
			}
		}
        stage("Test"){
            steps {
				echo "========= Start Testing =========="
				//sh 'code=`curl -sL --connect-timeout 20 --max-time 30 -w "%{http_code}\\n" "http://192.168.0.106/" -o /dev/null`'
				//sh 'echo \"Found code $code\"'
				//script begin
				script{
					try{
						def code = sh(script: 'curl -sL --connect-timeout 20 --max-time 30 -w "%{http_code}\\n" "http://192.168.0.100/" -o /dev/null', returnStdout: true)
						if (code.trim().equals("200")) {
							echo "Good"
							sh 'docker rm mynginx_first_stable'
							sh 'docker rmi mynginx_first_stable_image'
							return true
						} else {
							echo "Not Good"
							sh 'docker stop mynginx_first'//остановил бракованый контейнер
							sh 'docker rm mynginx_first'//удалил бракованый контейнер
							sh 'docker rename mynginx_first_stable mynginx_first'//переименовал назад рабочий контейнер
							sh 'docker start mynginx_first'//запустил рабочий контейнер
							sh 'docker tag mynginx_first mynginx_first_image_bad'//переименовал бракованый образ 
							sh 'docker tag mynginx_first_stable_image mynginx_first'//переименовал стабильный образ назад
							sh 'docker rmi mynginx_first_image_bad'//удалил бракованный контейнер
							return false
						}
					}	
					catch (exc){
						echo "Not Good"
						sh 'docker stop mynginx_first'//остановил бракованый контейнер
						sh 'docker rm mynginx_first'//удалил бракованый контейнер
						sh 'docker rename mynginx_first_stable mynginx_first'//переименовал назад рабочий контейнер
						sh 'docker start mynginx_first'//запустил рабочий контейнер
						sh 'docker tag mynginx_first mynginx_first_image_bad'//переименовал бракованый образ 
						sh 'docker tag mynginx_first_stable_image mynginx_first'//переименовал стабильный образ назад
						sh 'docker rmi mynginx_first_image_bad'//удалил бракованный контейнер
						return false
						//println exc
					}					
					//def code = sh 'code=`curl -sL --connect-timeout 20 --max-time 30 -w "%{http_code}\\n" "http://192.168.0.100/" -o /dev/null`'
					
					//**********Block new
					//int status = sh(script: "curl -sLI -w '%{http_code}' http://192.168.0.100/ -o /dev/null", returnStdout: true)
					//if (status != 200 && status != 201) {
					//	error("Returned status code = $status when calling http://192.168.0.100/")
					//}
					//**********End block new
					
					/* Work --->
					if (code.trim().equals("200")) {
						echo "Good"
						sh 'docker rm mynginx_first_stable'
						sh 'docker rmi mynginx_first_stable_image'
						return true
					} else {
						echo "Not Good"
						sh 'docker stop mynginx_first'//остановил бракованый контейнер
						sh 'docker rm mynginx_first'//удалил бракованый контейнер
						sh 'docker rename mynginx_first_stable mynginx_first'//переименовал назад рабочий контейнер
						sh 'docker start mynginx_first'//запустил рабочий контейнер
						sh 'docker tag mynginx_first mynginx_first_image_bad'//переименовал бракованый образ 
						sh 'docker tag mynginx_first_stable_image mynginx_first'//переименовал стабильный образ назад
						sh 'docker rmi mynginx_first_image_bad'//удалил бракованный контейнер
						return false
					}-----<EndWork*/
				}
				//end script
            }
        }
    }
}
