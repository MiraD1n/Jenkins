#!groovy
//Run NGINX docker build
properties([disableConcurrentBuilds()])

pipeline {
	agent {
		label 'docker-agent'
		}
	options {
		buildDiscarder (logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
		timestamps()
	}
	stages {
		stage("Build") {
			steps {
				echo "========= Start Build new NGINX =========="
				//Clean if trash remains 
				catchError (buildResult: 'SUCCESS', stageResult: 'FAILURE') {
					sh 'docker rmi mynginx_stable_image'
					sh 'docker rm mynginx_stable'
					}
        		//Ignore ERROR with first build 
				catchError (buildResult: 'SUCCESS', stageResult: 'FAILURE') {
					sh 'docker tag mynginx mynginx_stable_image'
					sh 'docker rmi mynginx'
					sh 'docker stop mynginx'
					sh 'docker rename mynginx mynginx_stable'
				}
				dir ('NGINX') {
				sh 'docker build -t mynginx .'
				    }
				sh 'docker run --name mynginx -d -p 80:80 -t mynginx'
				sh 'docker exec mynginx wget -O /usr/local/nginx/html/index.html https://raw.githubusercontent.com/MiraD1n/OpsWorks/master/WebProject/index.html'
				//try to comment/uncomments below to test different ways of crashes
				sh 'docker exec mynginx rm /usr/local/nginx/html/index.html'
				sh 'docker exec mynginx service nginx start'
			}
		}
        stage("Test"){
            steps {
				echo "========= Start Testing =========="
				script{
					try{
						def code = sh(script: 'curl -sL --connect-timeout 20 --max-time 30 -w "%{http_code}\\n" "http://192.168.0.100/" -o /dev/null', returnStdout: true)
						if (code.trim().equals("200")) {
							echo "Good"
							catchError (buildResult: 'SUCCESS', stageResult: 'FAILURE') {	
								sh 'docker rm mynginx_stable'
							}
							catchError (buildResult: 'SUCCESS', stageResult: 'FAILURE') {	
								sh 'docker rmi mynginx_stable_image'
							}	
							return						
						} else {
							echo "Not Good"
							sh 'docker stop mynginx'//stop bad container
							sh 'docker rm mynginx'//del bad container
							sh 'docker rename mynginx_stable mynginx'//rename back work container
							sh 'docker start mynginx'//run work container
							sh 'docker exec mynginx service nginx start'//start NGINX
							sh 'docker tag mynginx mynginx_image_bad'//rename bad image
							sh 'docker tag mynginx_stable_image mynginx'//rename back work image
							sh 'docker rmi mynginx_stable_image'//del old image tag
							sh 'docker rmi mynginx_image_bad'//del bad image
							currentBuild.result = 'FAILURE'
							return
						}
					}	
					catch (exc){
						echo "Not Good"
						sh 'docker stop mynginx'//stop bad container
						sh 'docker rm mynginx'//del bad container
						sh 'docker rename mynginx_stable mynginx'//rename back work container
						sh 'docker start mynginx'//run work container
						sh 'docker exec mynginx service nginx start'//start NGINX
						sh 'docker tag mynginx mynginx_image_bad'//rename bad image 
						sh 'docker tag mynginx_stable_image mynginx'//rename back work image
						sh 'docker rmi mynginx_stable_image'//del old image tag
						sh 'docker rmi mynginx_image_bad'//del bad image
						currentBuild.result = 'FAILURE'
						return
					}					
				}
            }
        }
		stage("End"){	
			steps {
				//prevent failure for first build
				sh 'exit 0'
			}
		}
	}		
}
